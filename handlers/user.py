import decimal

from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

import states
from data import *
from service import *
from database import *
# from aiogram.types import InputFile
from main import bot, dp
import keyboards
from aiogram import types


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'], state='*')
async def start_command(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    user_nickname = message.from_user.username
    referrer = None
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        new_user = User.create(tg_id=user_id, tg_nickname=user_nickname, balance=0, referrer=referrer)
        new_user.save()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—å –∫–∞–∫–æ–π-—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å—Å—ã–ª–∫–∏
        if " " in message.text:
            referrer_candidate = message.text.split()[1]

            # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            try:
                referrer_candidate = int(referrer_candidate)
                if user_id == referrer_candidate:
                    await message.answer("–•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞, –Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ)")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª –≤ –±–∞–∑–µ
                if user_id != referrer_candidate and User.select().where(User.tg_id == referrer_candidate).exists():
                    referrer = referrer_candidate
                    new_user.referrer = referrer
                    new_user.save()
                    await message.answer(text=f"–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
                                              f"{User.select().where(User.tg_id == referrer).get().tg_nickname}")

            except ValueError:
                # –£–∫–∞–∑–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞, –±–æ–Ω—É—Å—ã –Ω–∏–∫–æ–º—É –Ω–µ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è
                pass
    except IntegrityError as e:
        pass

    await message.answer(text="üëã –ü—Ä–∏–≤–µ—Çc–≤—É—é –≤ <b>Mellstroy SMS</b>.\nüõí –ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫.",
                         reply_markup=keyboards.main_reply_menu,
                         parse_mode='html')


# –°—Ç–∞–¥–∏—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(state=states.StateWorker.buy)
async def purchase(call: types.CallbackQuery, state: FSMContext):
    if 'tos' in call.data:
        target_page_number = int(call.data.split(' ')[1])
        new_markup = await keyboards.get_services_kb(page=service_pages[target_page_number],
                                                     number=target_page_number,
                                                     pages_count=len(service_pages))

        await call.message.edit_reply_markup(reply_markup=new_markup)

    elif 'toc' in call.data:
        target_page_number = int(call.data.split(' ')[1])
        new_markup = await keyboards.get_countries_kb(page=countries_pages[target_page_number],
                                                      number=target_page_number,
                                                      pages_count=len(countries_pages))

        await call.message.edit_reply_markup(reply_markup=new_markup)

    elif 'service' in call.data:
        product = call.data.split(" ")[1]

        async with state.proxy() as data:
            data['product'] = product

        msg_kb_rm = await bot.send_message(chat_id=call.message.chat.id,
                                           text="aboba",
                                           reply_markup=keyboards.ReplyKeyboardRemove())
        await bot.delete_message(call.message.chat.id, msg_kb_rm.message_id)

        await call.message.edit_caption(caption=f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É",
                                        reply_markup=await keyboards.get_countries_kb(countries_pages[0]))

    elif 'country' in call.data:
        country = call.data.split(" ")[1]
        async with state.proxy() as data:
            data['country'] = country

            operators_list = await get_prices(country=data['country'], product=data['product'])
            if not operators_list:
                await call.message.edit_caption(caption=f"–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {data['country'].upper()}",
                                                reply_markup=await keyboards.get_countries_kb(countries_pages[0]))
                return

        await call.message.edit_caption(caption=f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                                        reply_markup=await keyboards.get_operators_kb(operators_list))

    elif 'oper' in call.data:
        operator = call.data.split(" ")[1]
        price = call.data.split(" ")[2]
        async with state.proxy() as data:
            data['operator'] = operator
            data['price'] = float(price)

        await call.message.edit_caption(caption=f"–í–∞—à –≤—ã–±–æ—Ä:\n"
                                                f"–°–µ—Ä–≤–∏—Å: {data['product']},\n"
                                                f"–°—Ç—Ä–∞–Ω–∞: {data['country']},\n"
                                                f"–û–ø–µ—Ä–∞—Ç–æ—Ä: {data['operator']}\n\n"
                                                f"<i><b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {data['price']} RUB</b></i>",
                                        parse_mode='html',
                                        reply_markup=keyboards.buy_cancel_markup)

    elif 'buy' in call.data:
        user = User.select().where(User.tg_id == call.from_user.id).get()
        async with state.proxy() as data:
            if user.balance >= data['price']:

                order_data = await list_order(country=data['country'],
                                              operator=data['operator'],
                                              product=data['product'])
                if type(order_data) is str:
                    if order_data == 'no free phones':
                        await call.message.edit_caption(
                            caption=f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: –Ω–æ–º–µ—Ä–∞ –¥–∞–Ω–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å")
                    elif order_data == " ":
                        await call.message.edit_caption(
                            caption=f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
                    else:
                        await call.message.edit_caption(
                            caption=f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: `{order_data}`. –ï—Å–ª–∏ –¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏",
                            parse_mode="markdown")
                else:

                    user.balance = user.balance - decimal.Decimal(data['price'])
                    user.save()
                    Order.create(user=user.tg_id,
                                 sim5_id=order_data['id'],
                                 service=order_data['product'],
                                 country=order_data['country'],
                                 operator=order_data['operator'],
                                 phone_number=order_data['phone'],
                                 price=decimal.Decimal(order_data['price']),
                                 status=order_data['status'])

                    await states.StateWorker.order_confirmation.set()
                    await call.message.edit_caption(caption=f"–ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞. –í–∞—à –Ω–æ–º–µ—Ä: `{order_data['phone']}`",
                                                    reply_markup=await keyboards.get_order_kb(order_id=order_data['id']),
                                                    parse_mode="markdown")
                    return
            else:
                await call.message.edit_caption(caption="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        await state.finish()

    elif 'cancel' in call.data:
        await state.finish()
        await call.message.edit_caption(caption="–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await call.message.delete()


@dp.callback_query_handler(state=states.StateWorker.order_confirmation)
async def order_confirmation(call: types.CallbackQuery, state: FSMContext):
    if 'check_order' in call.data:
        order_id = call.data.split(" ")[1]
        await call.message.edit_caption(caption="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        order_data = await check_order(order_id=order_id)
        await call.message.edit_caption(caption=f"–î–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ:\n\n"
                                                f"–ù–æ–º–µ—Ä: {order_data['phone']}\n"
                                                f"–°—Ç–∞—Ç—É—Å: {statuses_ru[order_data['status']]}\n\n"
                                                f"–°–ú–°: {[sms['text'] for sms in order_data['sms']]}",
                                        reply_markup=await keyboards.get_order_kb(order_id=order_id))

    elif 'canc_order' in call.data:
        order_id = call.data.split(" ")[1]
        order_data = await cancel_order(order_id=order_id)
        if type(order_data) is str:
            if order_data == 'order has sms':
                await call.message.edit_caption(caption=f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞: –Ω–æ–º–µ—Ä –ø–æ–ª—É—á–∏–ª –°–ú–°",
                                                reply_markup=await keyboards.get_order_kb(order_id=order_id))
                return
            else:
                await call.message.edit_caption(caption=f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞: {order_data}",
                                                reply_markup=await keyboards.get_order_kb(order_id=order_id))
                return
        else:
            db_order = Order.select(Order.id, Order.sim5_id, Order.status).where(Order.sim5_id == order_id).get()
            db_order.status = order_data['status']
            db_order.save()
            user = User \
                .select(User.tg_id, User.tg_nickname, User.balance, User.referrer) \
                .where(User.tg_nickname == call.from_user.username) \
                .get()
            user.balance = user.balance + order_data['price']
            user.save()
            await state.finish()
            await states.StateWorker.buy.set()
            await call.message.edit_caption(caption=f"–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω",
                                            reply_markup=await keyboards.get_services_kb(service_pages[0]))

    elif 'finish_order' in call.data:
        order_id = call.data.split(" ")[1]
        order_data = await finish_order(order_id=order_id)
        if type(order_data) is str:
            if order_data == 'order no sms':
                await call.message.edit_caption(caption=f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–∫–∞–∑–∞: –Ω–æ–º–µ—Ä –Ω–µ –ø–æ–ª—É—á–∞–ª –°–ú–°.\n"
                                                        f"–ï—Å–ª–∏ –Ω–æ–º–µ—Ä –≤–∞–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑.\n"
                                                        f"–î–æ –ø–æ–ª—É—á–µ–Ω–∏—è –°–ú–° —ç—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–µ—Ä–Ω—É—Ç—å —á–∞—Å—Ç—å –¥–µ–Ω–µ–≥ –∑–∞ –∑–∞–∫–∞–∑.",
                                                reply_markup=await keyboards.get_order_kb(order_id=order_id))
                return
            else:
                await call.message.edit_caption(caption=f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–∫–∞–∑–∞: {order_data}",
                                                reply_markup=await keyboards.get_order_kb(order_id=order_id))
                return
        else:
            db_order = Order.select(Order.id, Order.sim5_id, Order.status).where(Order.sim5_id == order_id).get()
            db_order.status = order_data['status']
            db_order.save()
            await state.finish()
            await states.StateWorker.buy.set()
            await call.message.edit_caption(caption=f"–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç",
                                            reply_markup=await keyboards.get_services_kb(service_pages[0]))


@dp.callback_query_handler(state=states.StateWorker.balance_method)
async def payment_method(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'cryptobot':
        await state.finish()
        await states.StateWorker.balance_currency.set()
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É", reply_markup=keyboards.currencies)


@dp.callback_query_handler(state=states.StateWorker.balance_currency)
async def cryptobot_currency(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['currency'] = call.data.upper()
    await states.StateWorker.balance_commit.set()
    await call.message.edit_text(text=f"–í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞ {call.data.upper()}\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö –¥–ª—è –æ–ø–ª–∞—Ç—ã",
                                 reply_markup=InlineKeyboardMarkup().add(keyboards.cancel))


@dp.message_handler(state=states.StateWorker.balance_commit)
async def balance_commit(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        amount = float(message.text)
        if amount < 5:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ 5 RUB. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        else:
            async with state.proxy() as data:
                data['sum'] = amount
                invoice = await cryptobot_create_invoice(currency=data['currency'], sum=data['sum'])
                pay_btn = InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å",
                                               url=invoice.pay_url)
                check_btn = InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                                                 callback_data=f"check_invoice {invoice.invoice_id}")
                await message.answer(text=f"–ö –æ–ø–ª–∞—Ç–µ {invoice.amount} {data['currency']}",
                                     reply_markup=InlineKeyboardMarkup(row_width=1).add(pay_btn, check_btn))

    else:
        await message.answer("–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥")


@dp.callback_query_handler(state=states.StateWorker.balance_commit)
async def check_cb_invoice(call: types.CallbackQuery, state: FSMContext):
    if 'check_invoice' in call.data:
        if await check_cryptobot_invoice(int(call.data.split(" ")[1])):
            async with state.proxy() as data:
                user = User \
                    .select(User.tg_id, User.tg_nickname, User.balance, User.referrer) \
                    .where(User.tg_nickname == call.from_user.username) \
                    .get()

                user.balance = user.balance + decimal.Decimal(data['sum'])
                user.save()

                if user.referrer:
                    print("–ï—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª")
                    referrer = User \
                        .select(User.tg_id, User.tg_nickname, User.balance, User.referrer) \
                        .where(User.tg_id == user.referrer) \
                        .get()

                    referrer.balance = referrer.balance + decimal.Decimal(data['sum'] * 0.05)
                    referrer.save()

                await call.message.edit_text(text=f"–£—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ {data['sum']} RUB")
            await state.finish()
        else:
            await call.answer(text="–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á—ë—Ç!",
                              show_alert=True)


@dp.message_handler(state=states.StateWorker.transfer)
async def transfer(message: types.Message, state: FSMContext):
    reciever_nickname = message.text.replace("@", "").strip()

    if reciever_nickname == message.from_user.username:
        await message.answer("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ")
        await state.finish()
        return

    reciever = User.select(User.tg_id, User.tg_nickname, User.balance, User.referrer) \
        .where(User.tg_nickname == reciever_nickname)
    if reciever.exists():
        reciever = reciever.get()
        async with state.proxy() as data:
            data['reciever'] = reciever
    else:
        await message.answer("–ü–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", reply_markup=keyboards.main_reply_menu)
        await state.finish()
        return

    await states.StateWorker.transfer_commit.set()
    await message.answer(text=f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å {reciever.tg_nickname}\n–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞",
                         reply_markup=InlineKeyboardMarkup().add(keyboards.cancel))


@dp.message_handler(state=states.StateWorker.transfer_commit)
async def transfer_commit(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        transfer_sum = decimal.Decimal(message.text)
        if transfer_sum <= 0:
            await message.answer("–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥")
            return
        sender = User.select(User.tg_id, User.tg_nickname, User.balance, User.referrer) \
            .where(User.tg_id == message.from_user.id) \
            .get()
        if sender.balance >= transfer_sum:
            async with state.proxy() as data:
                reciever = data['reciever']

                sender.balance = sender.balance - transfer_sum
                sender.save()
                reciever.balance = reciever.balance + transfer_sum
                reciever.save()
                await message.answer(text=f"{transfer_sum} –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {reciever.tg_nickname}",
                                     reply_markup=keyboards.main_reply_menu)
                await bot.send_message(chat_id=reciever.tg_id,
                                       text=f"–í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥ {transfer_sum} RUB –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sender.tg_nickname}")
                await state.finish()
        else:
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", reply_markup=keyboards.main_reply_menu)
            await state.finish()
    else:
        await message.answer("–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥")


@dp.message_handler(state=states.StateWorker.dialog)
async def dialog(message: types.Message, state: FSMContext):
    reply_btn = InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å",
                                     callback_data=f'dialog {message.from_user.id}')
    await bot.send_message(chat_id=config.SUPPORT_ID,
                           text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username}\n\n*{message.text}*",
                           reply_markup=InlineKeyboardMarkup().add(reply_btn),
                           parse_mode="markdown")
    await message.answer(text="–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    await state.finish()


@dp.message_handler(state=states.StateWorker.dialog_support_reply)
async def dialog_support_reply(message: types.Message, state: FSMContext):
    reply_btn = InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å",
                                     callback_data=f'dialog {message.from_user.id}')
    async with state.proxy() as data:
        await bot.send_message(chat_id=data['reciever'],
                               text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username}\n\n*{message.text}*",
                               reply_markup=InlineKeyboardMarkup().add(reply_btn),
                               parse_mode="markdown")
    await message.answer(text="–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    await state.finish()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(state='*')
async def reply_handler(message: types.Message, state: FSMContext):
    await state.finish()
    if '–ö—É–ø–∏—Ç—å' in message.text:

        await states.StateWorker.buy.set()
        await bot.send_photo(chat_id=message.chat.id,
                             photo="AgACAgIAAxkDAAIBRWT2XyrjhNfadEFAWpECB1hAh70kAAIh1DEblzmxS5Jp6T-hQL3HAQADAgADcwADMAQ",
                             caption="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å",
                             reply_markup=await keyboards.get_services_kb(page=service_pages[0]))

    elif '–ü—Ä–æ—Ñ–∏–ª—å' in message.text:
        user = User.select(User.tg_id, User.balance).where(User.tg_id == message.from_user.id).get()
        caption_text = f"""üè¶ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} RUB
üôãüèª‚Äç‚ôÇÔ∏è –í–∞—à id: {user.tg_id}
üõç –ö–æ–ª-–≤–æ –ø–æ–∫—É–ø–æ–∫: {Order.select().where(Order.user == user.tg_id).count()}"""

        await bot.send_photo(chat_id=message.chat.id,
                             photo="AgACAgIAAxkDAAOFZPXIbi3N7UBmBdlCAZxfQ3K_aMUAAtjQMRuXObFLM9hdwO2K_RsBAAMCAANzAAMwBA",
                             caption=caption_text,
                             reply_markup=keyboards.account_inline_menu)

    elif '–ò–Ω—Ñ–æ' in message.text:
        await message.answer(text="‚ùóÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboards.info_inline_menu)


# –ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—å/–∏–Ω—Ñ–æ
@dp.callback_query_handler(state='*')
async def account_menu(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'balance':
        await states.StateWorker.balance_method.set()
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã", reply_markup=keyboards.pay_options_menu)

    elif call.data == 'referal':
        await call.message.answer(f"‚õìÔ∏è–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: \n"
                                  f"`https://t.me/smsmellstr_bot/?start={call.from_user.id}`\n"
                                  f"üíª –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {User.select().where(User.referrer == call.from_user.id).count()}\n"
                                  f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                  f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å 5% –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.",
                                  parse_mode="MarkDown")
    elif call.data == 'transfer':
        await call.message.answer(
            f"*–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–µ—Ä–Ω–æ, –∏–Ω–∞—á–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–æ–ø–∞–¥—É—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–µ –±—É–¥—É—Ç.",
            parse_mode="MarkDown",
            reply_markup=keyboards.ReplyKeyboardRemove())
        await states.StateWorker.transfer.set()
    elif call.data == 'history':

        orders = Order.select(Order.id, Order.service, Order.country, Order.price).where(
            Order.user == call.from_user.id)
        orders_btn = []
        for order in orders:
            orders_btn.append(InlineKeyboardButton(text=f"{order.service} - {order.country} - {order.price} RUB",
                                                   callback_data=f"order {order.id}"))
        await call.message.answer(text="–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫",
                                  reply_markup=InlineKeyboardMarkup(row_width=1).add(*orders_btn))
    elif call.data == 'manual':
        manual_text = """<u>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:</u>

<b>1. –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å", –≤—ã–±—Ä–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Å–µ—Ä–≤–∏—Å.</b>

<b>2. –ù–∞–∂–∞—Ç—å –Ω–∞ –Ω—É–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å, –≤—ã–±—Ä–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—Ç—Ä–∞–Ω—É.</b>

<b>3. –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥ —É –±–æ—Ç–∞, –æ–Ω –ø—Ä–∏–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.</b> 
–ï—Å–ª–∏ –±–æ—Ç –Ω–µ –≤—ã–¥–∞–µ—Ç –≤–∞–º –∫–æ–¥, —Ç–æ –∑–Ω–∞—á–∏—Ç –æ–Ω –µ—â–µ –Ω–µ –ø—Ä–∏—à–µ–ª, –∏–ª–∏ –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ –∫–∞–∫–æ–π-–ª–∏–±–æ –ø—Ä–∏—á–∏–Ω–µ. –ü—Ä–∏–º–µ—Ä: WhatsApp –Ω–µ –æ—Ç—Å—ã–ª–∞–µ—Ç –∫–æ–¥ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –≤–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ –∂–µ–ª–µ–∑—É. 

<b>4. –î–æ–∂–¥–∞—Ç—å—Å—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å–º—Å –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è.</b>
–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–æ–¥ –≤—ã –º–æ–∂–µ—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –°–ú–°".

<b>5. –ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ –∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –¥–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ê–∫—Ç–∏–≤–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞".

‚ùóÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –°–ú–° —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 20 –º–∏–Ω—É—Ç, –ø–æ—Å–ª–µ —á–µ–≥–æ —Ä–∞–±–æ—Ç–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è.

‚ÄºÔ∏è –ï—Å–ª–∏ –≤ –∫–∞–∫–æ–º - –ª–∏–±–æ —Å–µ—Ä–≤–∏—Å–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω—É–∂–Ω–∞—è –≤–∞–º —Å—Ç—Ä–∞–Ω–∞, –∑–Ω–∞—á–∏—Ç –Ω–æ–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.</b>"""
        await call.message.answer(text=manual_text, parse_mode='html')
    elif call.data == 'rules':
        rules_text = """<u>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ:</u>

<b>1. –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–µ–π—Å–∫—É—Ä–∞–Ω—Ç—É (–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –¥–æ –ø–æ–∫—É–ø–∫–∏ –Ω–æ–º–µ—Ä–∞).
- 1.1 –î–µ–Ω—å–≥–∏ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø.1.4,1.5 —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞).

2. –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –≤—ã–¥–µ–ª–µ–Ω, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω (—Ç–æ –µ—Å—Ç—å –≤—ã –Ω–µ —É–≤–∏–¥–µ–ª–∏ –∫–æ–¥ –∏–∑ —Å–º—Å), –≤—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –±–µ–∑ –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ —à—Ç—Ä–∞—Ñ–∞.

3. –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –≤—ã –¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –æ—Ç @smsmellstr_bot

4. –ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ @smsmellstr_bot –≤ –ª—é–±—ã—Ö –ø—Ä–æ—Ç–∏–≤–æ–ø—Ä–∞–≤–Ω—ã—Ö —Ü–µ–ª—è—Ö.
- 4.1 –¢–∞–∫–∂–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º–∏ —Ü–µ–ª—è–º–∏, –Ω–∞—Ä—É—à–∞—é—â–∏–µ –£–≥–æ–ª–æ–≤–Ω—ã–π –ö–æ–¥–µ–∫—Å –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏: –æ–±–º–∞–Ω, –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ –∏ –ø—Ä–æ—á–∏–µ (–£–ö –†–§ 138, –£–ö –†–§ 159, –£–ö –†–§ 228, –£–ö –†–§ 272, –£–ö –†–§ 273, –£–ö –†–§ 274)
- 4.2 –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.

5. –ú—ã –Ω–µ –Ω–µ—Å–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã, –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è, –≤–∫–ª—é—á–∞—è –≤–æ–∑–º–æ–∂–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–æ–±—Ä–µ–ª –∞–∫—Ç–∏–≤–∞—Ü–∏—é.

6. –í–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω.

7. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏–ª–∏ –±—Ä–µ—à–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è –ø–æ –£–ö –†–§ —Å—Ç.273
–ü–æ–ª—å–∑—É—è—Å—å –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º.

8. –°–µ—Ä–≤–∏—Å –Ω–µ –¥–µ–ª–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ QIWI –∫–æ—à–µ–ª—ë–∫ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –∫–ª–∏–µ–Ω—Ç–∞. –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ñ–æ—Ä—Å –º–∞–∂–æ—Ä–Ω—ã—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞ —Å–µ—Ä–≤–∏—Å–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24-–µ—Ö —á–∞—Å–æ–≤, –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∏ —Ç–¥.). –ù–∞ –Ω–æ–º–µ—Ä –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –°–ú–°, –Ω–æ–º–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —Å–µ—Ä–≤–∏—Å–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä –í–ö) - –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–Ω—ã–º –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–æ–º.

9. –ó–∞–ø—Ä–µ—â–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–º–µ—Ä–æ–≤ –±–µ–∑ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–º–µ–Ω–æ–π. 

10. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –≤ –ø—Ä–∞–≤–µ –º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∑ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

11. –ü—Ä–∞–≤–∏–ª–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:

–ï—Å–ª–∏ –≤—ã –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä, –∞ –æ–Ω –æ–∫–∞–∑–∞–ª—Å—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞, –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –≤ –±–æ—Ç–µ –∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. –ï—Å–ª–∏ –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω - –Ω–æ–º–µ—Ä —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º.

- 11.1 –í–æ–∑–≤—Ä–∞—Ç –∑–∞ –Ω–æ–º–µ—Ä–∞ WhatsApp –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –Ω–æ–º–µ—Ä–∞ —Å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π.
–í–æ–∑–≤—Ä–∞—Ç –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –Ω–æ–º–µ—Ä–∞ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω, —Ç.–∫. –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ –Ω–æ–º–µ—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.</b>"""
        await call.message.answer(text=rules_text, parse_mode='html')
    elif call.data == 'support':
        await states.StateWorker.dialog.set()
        await call.message.answer(
            text="_–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏_\n*–í–Ω–∏–º–∞–Ω–∏–µ! –ù–µ –ø–æ–¥–¥–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤–≤–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É, –æ—Å—Ç–∞–≤—å—Ç–µ –Ω–∞ –Ω–µ—ë —Å—Å—ã–ª–∫—É.*",
            parse_mode="markdown")
    elif 'dialog' in call.data:
        async with state.proxy() as data:
            data['reciever'] = call.data.split(" ")[1]
        await call.message.answer(
            text="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç\n\n*–í–Ω–∏–º–∞–Ω–∏–µ! –ù–µ –ø–æ–¥–¥–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤–≤–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É, –æ—Å—Ç–∞–≤—å—Ç–µ –Ω–∞ –Ω–µ—ë —Å—Å—ã–ª–∫—É.*",
            parse_mode="markdown")
        await states.StateWorker.dialog_support_reply.set()
    elif 'cancel' in call.data:
        await state.finish()
        await call.message.answer(text="–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=keyboards.main_reply_menu)
        await call.message.delete()

    # else:
    #     await call.message.answer(text="–ß—ë?")
